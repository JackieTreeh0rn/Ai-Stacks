
version: '3.9'

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "1"
    tag: "{{.Name}}"

services:
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    depends_on:
      - redis
      - docling
      - db
      - edgetts
      - mcposerver
      - searxng
      - tika
      # - ollama
    volumes:
      - /mnt/glusterfs/open-webui/data:/app/backend/data
    env_file:
      - env/owui.env
    environment:
      TZ: America/New_York
      # CORS - use "*" for allow-all (can create 500 errors w/current traefik CORS rules)
      CORS_ALLOW_ORIGIN: https://${ROUTER_NAME}.${ROOT_DOMAIN}
    networks:
      - backend
      - traefik-public
    # ports:
    #   - target: 8080
    #     published: 3000
    #     mode: overlay
    healthcheck:
      interval: 30s
      retries: 10
      start_period: 120s
      test: ["CMD-SHELL", "curl --fail localhost:8080/health || exit 1"]
      timeout: 5s
    deploy:
      replicas: 2
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 10
      labels:
        - traefik.enable=true
        - traefik.swarm.network=traefik-public
        - traefik.http.routers.${ROUTER_NAME}.rule=Host(`${ROUTER_NAME}.${ROOT_DOMAIN}`)
        - traefik.http.routers.${ROUTER_NAME}.middlewares=chain-oauth@file,error-pages
        - traefik.http.routers.${ROUTER_NAME}.service=${ROUTER_NAME}-svc
        - traefik.http.services.${ROUTER_NAME}-svc.loadbalancer.server.port=8080
        - traefik.constraint=traefik-public # cloudflared
    logging: *default-logging

  db:
    image: pgvector/pgvector:pg17
    env_file: env/db.env
    user: "999:999"
    environment:
      TZ: America/New_York
    entrypoint: ["/init/entrypoint.sh"] # custom entrypoint
    command: ["postgres"] # custom entrypoint
    healthcheck:
      interval: 30s
      retries: 10
      start_period: 60s
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      timeout: 10s
    volumes:
      - postgres:/var/lib/postgresql/data
      - /mnt/glusterfs/open-webui/postgres/init:/init:ro #for custom entry point
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    logging: *default-logging

  edgetts:
    image: travisvn/openai-edge-tts:latest
    env_file: env/edgetts.env
    environment:
      TZ: America/New_York
    networks:
      - backend
    # ports:
    #   - 5050:5050
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    logging: *default-logging

  mcposerver:
    image: ghcr.io/open-webui/mcpo:latest
    env_file: env/mcp.env
    environment:
      TZ: America/New_York
    command: ["--config", "/app/conf/config.json"]
    volumes:
      - /mnt/glusterfs/open-webui/mcposerver/conf:/app/conf:ro
    networks:
      - backend
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    logging: *default-logging

  searxng:
    image: searxng/searxng:2025.7.10-4b9644e
    user: "977:977"
    env_file: env/searxng.env
    environment:
      TZ: America/New_York
    depends_on:
      - redis
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    cap_drop: #disable on first run
      - ALL
    volumes:
      - /mnt/glusterfs/open-webui/searxng/conf/settings.yml:/etc/searxng/settings.yml:ro
      - /mnt/glusterfs/open-webui/searxng/conf/uwsgi.ini:/etc/searxng/uwsgi.ini:ro
      - /mnt/glusterfs/open-webui/searxng/conf/limiter.toml:/etc/searxng/limiter.toml:ro
      - searxng:/var/cache/searxng:rw
    networks:
      - backend
    # ports:
    #   - 8888:8080
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  tika:
    image: apache/tika:${TAG:-3.2.0.0}-full
    env_file: env/tika.env
    entrypoint: [ "/bin/sh", "-c", "exec java -cp \"/customocr:/tika-server-standard-$${TIKA_VERSION}.jar:/tika-extras/*\" org.apache.tika.server.core.TikaServerCli -h 0.0.0.0 $$0 $$@"]
    command: -c /tika-config.xml
    environment:
      TZ: America/New_York
    networks:
      - backend
    # ports:
    #   - 9998:9998
    volumes:
      - /mnt/glusterfs/open-webui/tika/conf/customocr/tika-config-rendered.xml:/tika-config.xml
      - /mnt/glusterfs/open-webui/tika/conf/customocr:/customocr
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    logging: *default-logging

  redis:
    image: docker.io/valkey/valkey:8-alpine
    env_file: env/redis.env
    environment:
      TZ: America/New_York
    volumes:
      - /mnt/glusterfs/open-webui/redis/data:/data # might require 'chown -Rv 999:999'
    command: "valkey-server --save 30 1" # --loglevel warning"
    healthcheck:
      test: "[ $$(valkey-cli ping) = 'PONG' ]"
      start_period: 5s
      interval: 1s
      timeout: 3s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    networks:
      - backend
    # ports:
    #   - 6379:6379
    logging: *default-logging

  pipelines:
    image: ghcr.io/open-webui/pipelines:main
    volumes:
      - /mnt/glusterfs/open-webui/pipelines:/app/pipelines
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    networks:
      - backend
    environment:
      - TZ=America/New_York
      - PIPELINES_API_KEY=0p3n-w3bu!
    logging: *default-logging

  # Uncomment if running Ollama via this compose, with GPU support
  # ollama:
  #   image: ollama/ollama:latest
  #   hostname: ollama
  #   ports:
  #     - target: 11434
  #       published: 11434
  #       mode: overlay
  #   deploy:
  #     resources:
  #       reservations:
  #         generic_resources:
  #           - discrete_resource_spec:
  #               kind: "NVIDIA-GPU"
  #               value: 0
  #     replicas: 1
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #   volumes:
  #     - ./data/ollama:/root/.ollama


networks:
  backend:
    name: ${BACKEND_NETWORK_NAME}
    external: true
  traefik-public:
    external: true

volumes:
  postgres:
    external: true
    name: ${STACK_NAME}_postgresdata
  searxng:
    name: ${STACK_NAME}_searxngcache